---

name: Logical expressions output
theory: |

  Look at the code below and try to guess what it will print?

  ```javascript
  console.log(0 || 1);
  ```

  Correct answer::

  <pre class='hexlet-basics-output'>
    1
  </pre>

  The **OR** operator works so that its execution (left to right) interrupts and returns the result of the first argument converting into `true` value.

  Example:

  ```javascript
  console.log(0 && 1);
  ```

  <pre class='hexlet-basics-output'>
    0
  </pre>

  The **AND** operator works so that its execution (left to right) interrupts and returns the result of the first argument evaluating into `false` value.

  There are two basic rules in JavaScript by which conversions take place:

  * `0`, `''`, `undefined`, `NaN`, `null` are converted into `false`. Those values are considered *falsy*.
  * Everything else is converted into `true`

  Developers extensively use this, for example, to define a default value:

  ```javascript
  const value = name || '';
  // Примеры
  234 || ''; // 234
  'hexlet' || ''; // 'hexlet'
  undefined || ''; // ''
  ```
  If `name` is given one of the falsy values, an empty string will be assigned to the `value` constant. In that case, in the subsequent code, we will be able to treat `value` as a string.

  But there is a potential bug. If `name` contains a falsy value and it's okay to assign values like `0`, `undefined`, `NaN` or `null` to the `value` constant, then the code above gets it wrong:

  ```javascript
  // Oops
  false || ''; // ''
  0 || ''; // ''
  undefined || ''; // ''
  ```

  We covered the relational operators `===` and `!==` in one of our lessons and mentioned that JavaScript also has the operators `==` and `!=`, though you shouldn't use them. The very difference lies in the type conversion:

  ```javascript
  console.log('' === false); // => false
  console.log('' == false);  // => true
  ```

  The empty string and `false` are different values, so the `===` operator says "false! they are not equal!".

  But the `==` operator converts types, making the empty string and `false` equal from its point of view.

  This conversion is implicit, so avoid the `==` and `!=` operators whenever possible.

  ---

  Recall the negation:

  ```javascript
  const answer = true;
  console.log(!answer); // => false
  ```

  When you use double negation `!!` the result value is equal to the initial value:

  ```javascript
  const answer = true;
  console.log(!!answer); // => true
  ```

  However, this is where type conversions also take place. So the result of the double negation will always be a value of type _boolean_. This trick sometimes helps to change the data type.

  ## Selection error

  Imagine a task to check if a value is equal to either this or that. For instance, the variable `value` must contain one of two values: `first` or `second`. Novice developers sometimes write this expression this way:

  ```javascript
  value === ('first' || 'second')
  ```

  That's how we picture it in our minds, yet languages work differently, so this kind of code will lead to the wrong result. How to read it correctly? We have to remember operators' precedence. The first thing to evaluate is wrapped in parentheses, i.e. `'first' || 'second'`. If we execute this code, the output will be:

  ```bash
  node
  'Welcome to Node.js v17.4.0.
  > 'first' || 'second'
  'first'
  >
  ```

  Now we can substitute the original expression with the partly evaluated one:

  ```javascript
  value === 'first'
  ```

  Not what you might expect at all. Now back to the start, and write the test correctly:

  ```javascript
  // Parentheses are not necessary,
  // because === precedence is higher than that of ||
  value === 'first' || value === 'second'
  ```

instructions: |

  Write a function `getLetter()` to extract a certain character (by ordinal number, not an index) from the given string and return it. If there is no such character, the function returns an empty string.

  Examples:

  ```javascript
  const name = 'Hexlet';

  // Such a call returns undefined
  name[10]; // undefined

  // The 11th char stands for the 10th index
  getLetter(name, 11); // ''

  getLetter(name, 1); // 'H'
  getLetter(name, 0); // ''
  getLetter(name, 6); // 't'
  ```

# tips:
#   - |
#     [Boolean](https://ru.wikipedia.org/wiki/Логический_тип)
#   - |
#     [Извлечение символов из строки](https://ru.code-basics.com/languages/javascript/lessons/symbols)
