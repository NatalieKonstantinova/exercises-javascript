---

name: else if statement
theory: |

  The `getTypeOfSentence()` function from the previous lesson only distinguishes between question and normal sentences. Let's try to extend it to exclamation sentences:

  ```javascript
  const getTypeOfSentence = (sentence) => {
    const lastChar = sentence[sentence.length - 1];
    let sentenceType;

    if (lastChar === '!') {
      sentenceType = 'exclamation';
    } else {
      sentenceType = 'normal';
    }

    if (lastChar === '?') {
      sentenceType = 'question';
    }

    return `Sentence is ${sentenceType}`;
  };

  getTypeOfSentence('Who?'); // 'Sentence is question'
  getTypeOfSentence('No');   // 'Sentence is normal'
  getTypeOfSentence('No!');  // 'Sentence is exclamation'
  ```

  We add one more test. Technically the function works, but there are semantics issues.

  - It tests for the question mark in any case, regardless of whether an exclamation point was found or not.
  - The `else` branch is defined for the first condition, not for the second.

  It would be wiser to use another feature of the conditional construct:

  ```javascript
  const getTypeOfSentence = (sentence) => {
    const lastChar = sentence[sentence.length - 1];
    let sentenceType;

    if (lastChar === '?') {
      sentenceType = 'question';
    } else if (lastChar === '!') {
      sentenceType = 'exclamation';
    } else {
      sentenceType = 'normal';
    }

    return `Sentence is ${sentenceType}`;
  };

  getTypeOfSentence('Who?'); // 'Sentence is question'
  getTypeOfSentence('No');   // 'Sentence is normal'
  getTypeOfSentence('No!');  // 'Sentence is exclamation'
  ```

  Now all the conditions are framed in a single construction. The `else if` is "if the previous condition is not satisfied, while the current condition one is". This is the scheme:

  - if the last character is `?`, the `'question'`
  - else, if the last character is `!`, then `'exclamation'`
  - else `'normal'`.

  Only one of the code blocks belonging to the entire `if` construct will execute.

instructions: |

  The digital map of Westeros that Sam implemented shows Stark allies in green, enemies in red, and neutral families in gray.

  Write the function `whoIsThisHouseToStarks()` for Sam taking the family name as input and returning one of three values: `'friend'`, `'enemy'`, `'neutral'`.

  Rules:

  * Friends: 'Karstark', 'Tally'
  * Enemies: 'Lannister', 'Frey'
  * Any other families are considered neutral

  Examples:

  ```javascript
  whoIsThisHouseToStarks('Karstark'); // 'friend'
  whoIsThisHouseToStarks('Frey');     // 'enemy'
  whoIsThisHouseToStarks('Joar');     // 'neutral'
  whoIsThisHouseToStarks('Ivanov');   // 'neutral'
  ```

tips: []

definitions:
  - name: "else if"
    description: "is a way to set multiple alternate conditions."
