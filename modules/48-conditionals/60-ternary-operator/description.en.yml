---

name: Ternary operator
theory: |

  Look at the definition of this function, which returns the modulus of a given number:

  ```javascript
  const abs = (number) => {
    if (number >= 0) {
      return number;
    }

    return -number;
  };

  abs(10); // 10
  abs(-10); // 10
  ```

  Can we write it more concisely? Something like `return <something depending on the condition>`? That would require an expression following return, but `if` is a statement, not an expression.

  We have a construct in JavaScript that works the same way as the *if-else* construct, except it's an expression. It's called the **ternary operator**.

  The ternary operator is the only JavaScript operator that takes three operands:

  ```javascript
  const abs = (number) => {
    return number >= 0 ? number : -number;
  };
  ```

  The general pattern looks like this: `<predicate> ? <expression on true> : <expression on false>`.

  Here is a shortened version of the `abs()` function:

  ```javascript
  const abs = (number) => (number >= 0 ? number : -number);
  ```

  Note the parentheses around the ternary. They are optional, but linter [strongly recommends](https://eslint.org/docs/rules/no-confusing-arrow) to put them to avoid ambiguities.

  Let's rewrite the initial version of `getTypeOfSentence()` in the same way:

  Before:

  ```javascript
  const getTypeOfSentence = (sentence) => {
    const lastChar = sentence.slice(-1);

    if (lastChar === '?') {
        return 'question';
    }

    return 'normal';
  };
  ```

  After:

  ```javascript
  const getTypeOfSentence = (sentence) => {
    const lastChar = sentence.slice(-1);

    return (lastChar === '?') ? 'question' : 'normal';
  };

  getTypeOfSentence('Hodor');  // normal
  getTypeOfSentence('Hodor?'); // question
  ```

  ---

  If you remember the main strength of expressions, then you probably figured out by now that you can put a ternary operator into a ternary operator. ** Don't do it :)** Such code is hard both to read and to debug, it's very bad practice.

instructions: |

  Write a function `convertText()`, which takes a string as input, and if the first letter is not capitalized, returns a reversed version of that string. If the first letter is capitalized, it returns the string unchanged. If the input is an empty string, the function must return an empty string.

  Examples:

  ```javascript
  convertText('Hello'); // 'Hello'
  convertText('hello'); // 'olleh'

  // Be sure to take the empty line into account
  convertText(''); // ''
  ```

  You can reverse a string using the `reverse()` function. It takes a string we want to reverse as an argument:

  ```javascript
  const result = reverse('Hello!');
  console.log(result); // => '!olleH'
  ```

  There are various approaches to solve this problem. You may want to use the [toUpperCase()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase) method and the feature that allows you to get a character from a string (for example, `str[0]`).

  Try to write two versions of the function: with the usual if-else, and with a ternary operator.

  ## Tips

  * Consider the first condition you need to write. Is it a capitalization check or an empty line check? Which is primary?

tips: []

definitions:
  - name: Ternary operator
    description: |
      is a way to convert a simple conditional statement into an expression, e.g., `number >= 0 ? number : -number`.
